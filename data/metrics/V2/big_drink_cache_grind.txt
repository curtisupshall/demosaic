==27693== Cachegrind, a cache and branch-prediction profiler
==27693== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==27693== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==27693== Command: ./metric.exe
==27693==
--27693-- warning: L3 cache found, using its data for the LL simulation.
Goodbye!
==27693==
==27693== I   refs:      2,331,299,686
==27693== I1  misses:            1,056
==27693== LLi misses:            1,052
==27693== I1  miss rate:          0.00%
==27693== LLi miss rate:          0.00%
==27693==
==27693== D   refs:      1,195,681,778  (988,630,672 rd   + 207,051,106 wr)
==27693== D1  misses:        3,385,338  (  3,384,441 rd   +         897 wr)
==27693== LLd misses:        2,253,060  (  2,252,213 rd   +         847 wr)
==27693== D1  miss rate:           0.3% (        0.3%     +         0.0%  )
==27693== LLd miss rate:           0.2% (        0.2%     +         0.0%  )
==27693==
==27693== LL refs:           3,386,394  (  3,385,497 rd   +         897 wr)
==27693== LL misses:         2,254,112  (  2,253,265 rd   +         847 wr)
==27693== LL miss rate:            0.1% (        0.1%     +         0.0%  )

--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./metric.exe
Data file:        cachegrind.out.27693
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:
User annotated:
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir            I1mr  ILmr  Dr          D1mr      DLmr      Dw          D1mw DLmw
--------------------------------------------------------------------------------
2,331,299,686 1,056 1,052 988,630,672 3,384,441 2,252,213 207,051,106  897  847  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr      DLmr      Dw          D1mw DLmw  file:function
--------------------------------------------------------------------------------
2,331,130,998   83   83 988,585,479 3,381,645 2,249,875 207,033,512    4    2  /tmp/demosaic440/decode.c:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /tmp/demosaic440/decode.c
--------------------------------------------------------------------------------
Ir         I1mr ILmr Dr         D1mr    DLmr    Dw        D1mw DLmw

-- line 21 ----------------------------------------
         .    .    .          .       .       .         .    .    .      uint32_t imageSize;
         .    .    .          .       .       .         .    .    .      int32_t xResolution;
         .    .    .          .       .       .         .    .    .      int32_t yResolution;
         .    .    .          .       .       .         .    .    .      uint32_t colorsUsed;
         .    .    .          .       .       .         .    .    .      uint32_t colorsImportant;
         .    .    .          .       .       .         .    .    .  } BMPInfoHeader;
         .    .    .          .       .       .         .    .    .  #pragma pack(pop)
         .    .    .          .       .       .         .    .    .
         3    0    0          0       0       0         1    0    0  int main() {
         4    0    0          0       0       0         2    2    1      FILE *fp = fopen("./encoded.bmp", "rb");
         2    1    1          1       0       0         0    0    0      if (!fp) {
         .    .    .          .       .       .         .    .    .          printf("Error opening file.\n");
         .    .    .          .       .       .         .    .    .          return 1;
         .    .    .          .       .       .         .    .    .      }
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      BMPHeader header;
         .    .    .          .       .       .         .    .    .      BMPInfoHeader infoHeader;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Read the BMP header
         7    0    0          1       0       0         1    0    0      fread(&header, sizeof(BMPHeader), 1, fp);
         7    1    1          1       0       0         1    0    0      fread(&infoHeader, sizeof(BMPInfoHeader), 1, fp);
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Check if it's a valid BMP file
         3    0    0          1       0       0         0    0    0      if (header.type != 0x4D42) {
         .    .    .          .       .       .         .    .    .          printf("Invalid BMP file.\n");
         .    .    .          .       .       .         .    .    .          fclose(fp);
         .    .    .          .       .       .         .    .    .          return 1;
         .    .    .          .       .       .         .    .    .      }
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Check if it's a 24-bit BMP file
         3    1    1          1       0       0         0    0    0      if (infoHeader.bitDepth != 24) {
         .    .    .          .       .       .         .    .    .          printf("Unsupported bit depth. Only 24-bit BMP is supported.\n");
         .    .    .          .       .       .         .    .    .          fclose(fp);
         .    .    .          .       .       .         .    .    .          return 1;
         .    .    .          .       .       .         .    .    .      }
         .    .    .          .       .       .         .    .    .
         2    0    0          1       0       0         1    0    0      int imageHeight = infoHeader.height;
         2    1    1          1       0       0         1    0    0      int imageWidth = infoHeader.width;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Calculate the row size in words (including padding)
         7    0    0          1       0       0         1    0    0      uint32_t rowSize = ((imageWidth * 3 + 3) & ~3) / 4;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Calculate the column size in words (including padding)
         7    0    0          1       0       0         1    0    0      uint32_t colSize = ((imageHeight * 3 + 3) & ~3) / 4;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Allocate memory for the pixel data
         7    0    0          2       0       0         2    0    0      uint32_t *pixels = (uint32_t*)malloc(rowSize * 4 * imageHeight);
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Allocate memory buffer for image columns
         6    1    1          1       0       0         2    0    0      uint32_t *colBuffer = (uint32_t*)malloc(colSize * 4);
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Read the pixel data
        10    0    0          4       0       0         1    0    0      fread(pixels, rowSize * 4 * imageHeight, 1, fp);
         .    .    .          .       .       .         .    .    .
         3    1    1          1       0       0         1    0    0      fclose(fp);
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      uint32_t x;
         .    .    .          .       .       .         .    .    .      uint32_t y;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // GR bottom
         .    .    .          .       .       .         .    .    .      uint32_t k0_0;
         .    .    .          .       .       .         .    .    .      uint32_t k0_1;
         .    .    .          .       .       .         .    .    .      uint32_t k0_2;
-- line 83 ----------------------------------------
-- line 121 ----------------------------------------
         .    .    .          .       .       .         .    .    .       *
         .    .    .          .       .       .         .    .    .       *      K0, K3, K6, K9            K1, 4, 7, 10             K2, 5, 8, 11
         .    .    .          .       .       .         .    .    .       *  +----+----+----+----+    +----+----+----+----+    +----+----+----+----+
         .    .    .          .       .       .         .    .    .       *  | B1 | R0 | G0 | B0 |    | G1 | B1 | R0 | G0 |    | R1 | G1 | B1 | R0 |
         .    .    .          .       .       .         .    .    .       *  +----+----+----+----+    +----+----+----+----+    +----+----+----+----+
         .    .    .          .       .       .         .    .    .       *
         .    .    .          .       .       .         .    .    .       *
         .    .    .          .       .       .         .    .    .       */
     6,005    1    1      4,502       0       0         1    1    0      for (y = 0; y < imageHeight; y += 4) {
         .    .    .          .       .       .         .    .    .          // Loop prologue
    12,000    0    0      6,000       1       0     1,500    0    0          k0_0 = pixels[y * rowSize];
    13,500    1    1      6,000       0       0     1,500    0    0          k0_1 = pixels[y * rowSize + 1];
    13,500    0    0      6,000       0       0     1,500    0    0          k0_2 = pixels[y * rowSize + 2];
    13,500    1    1      6,000   1,500   1,500     1,500    0    0          k0_3 = pixels[(y + 1) * rowSize];
    15,000    0    0      6,000       0       0     1,500    0    0          k0_4 = pixels[(y + 1) * rowSize + 1];
    15,000    1    1      6,000       0       0     1,500    0    0          k0_5 = pixels[(y + 1) * rowSize + 2];
    13,500    0    0      6,000   1,500   1,500     1,500    0    0          k1_0 = pixels[(y + 2) * rowSize];
    15,000    1    1      6,000       0       0     1,500    0    0          k1_1 = pixels[(y + 2) * rowSize + 1];
    15,000    0    0      6,000       0       0     1,500    0    0          k1_2 = pixels[(y + 2) * rowSize + 2];
    13,500    1    1      6,000   1,500   1,500     1,500    0    0          k1_3 = pixels[(y + 3) * rowSize];
    15,000    0    0      6,000       0       0     1,500    0    0          k1_4 = pixels[(y + 3) * rowSize + 1];
    15,000    1    1      6,000       0       0     1,500    0    0          k1_5 = pixels[(y + 3) * rowSize + 2];
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Read K0_1[R0] into p0_r
     3,000    0    0      1,500       0       0     1,500    0    0          p0_r = k0_1;
     1,500    0    0      1,500       0       0         0    0    0          p0_r = p0_r & 0x0000FF00;
     1,500    0    0      1,500       0       0         0    0    0          p0_r = p0_r >> 8;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Read K0_0[G0] into p0_gr
     3,000    0    0      1,500       0       0     1,500    0    0          p0_gr = k0_0;
     1,500    0    0      1,500       0       0         0    0    0          p0_gr = p0_gr >> 8;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Preload p0_gb with K0_4[G0]
     3,000    0    0      1,500       0       0     1,500    0    0          p0_gb = k0_4;
     1,500    1    1      1,500       0       0         0    0    0          p0_gb = p0_gb & 0x000000FF;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Load K0_3[B0] into p0_b
     3,000    0    0      1,500       0       0     1,500    0    0          p0_b = k0_3;
     1,500    0    0      1,500       0       0         0    0    0          p0_b = p0_b & 0x000000FF;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Read K1_1[R0] into p1_r
     3,000    0    0      1,500       0       0     1,500    0    0          p1_r = k1_1;
     1,500    0    0      1,500       0       0         0    0    0          p1_r = p1_r & 0x0000FF00;
     1,500    0    0      1,500       0       0         0    0    0          p1_r = p1_r >> 8;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Read K1_0[G0] into p1_gr
     3,000    0    0      1,500       0       0     1,500    0    0          p1_gr = k1_0;
     1,500    0    0      1,500       0       0         0    0    0          p1_gr = p1_gr >> 8;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Preload p1_gb with K1_4[G0]
     3,000    0    0      1,500       0       0     1,500    0    0          p1_gb = k1_4;
     1,500    0    0      1,500       0       0         0    0    0          p1_gb = p1_gb & 0x000000FF;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .          // 0. Load K1_3[B0] into p1_b
     3,000    0    0      1,500       0       0     1,500    0    0          p1_b = k1_3;
     1,500    1    1      1,500       0       0         0    0    0          p1_b = p1_b & 0x000000FF;
         .    .    .          .       .       .         .    .    .
12,013,500    1    1  4,503,000       0       0     1,500    0    0          for (x = 0; x < imageWidth / 4; x ++) {
         .    .    .          .       .       .         .    .    .              // 1. Read K0_1[R0] into p0_r
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_r = p0_r;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_r = k0_1;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_r = p0_r & 0x0000FF00;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_r = p0_r >> 8;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_r = tmp0_r + p0_r; // Combine p0_r
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 1. Read K1_1[R0] into p1_r
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_r = p1_r;
 3,000,000    1    1  1,500,000       0       0 1,500,000    0    0              p1_r = k1_1;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_r = p1_r & 0x0000FF00;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_r = p1_r >> 8;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_r = tmp1_r + p1_r; // Combine p1_r
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 1. Read K0_4[G0] into p0_gb
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_gb = p0_gb;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_gb = k0_4;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gb = p0_gb & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_gb = tmp0_gb + p0_gb; // Combine p0_gb
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 1. Read K1_4[G0] into p1_gb
 3,000,000    1    1  1,500,000       0       0 1,500,000    0    0              tmp1_gb = p1_gb;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_gb = k1_4;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gb = p1_gb & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_gb = tmp1_gb + p1_gb; // Combine p1_gb
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 2. Write p0_r to K0_0[R0].
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_r = tmp0_r >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_r = tmp0_r << 16;
 1,500,000    0    0  1,500,000       0       0         0    0    0              k0_0 = k0_0 & 0xFF00FFFF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_0 = k0_0 | tmp0_r;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 2. Write p1_r to K1_0[R0].
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_r = tmp1_r >> 1; // Divide by 2
 1,500,000    1    1  1,500,000       0       0         0    0    0              tmp1_r = tmp1_r << 16;
 1,500,000    0    0  1,500,000       0       0         0    0    0              k1_0 = k1_0 & 0xFF00FFFF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_0 = k1_0 | tmp1_r;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 2. Read K0_4[B1] into p0_b
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_b = p0_b;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_b = k0_4;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_b = p0_b & 0x00FF0000;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_b = p0_b >> 16;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_b = tmp0_b + p0_b; // Combine p0_b
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 2. Read K1_4[B1] into p1_b
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_b = p1_b;
 3,000,000    1    1  1,500,000       0       0 1,500,000    0    0              p1_b = k1_4;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_b = p1_b & 0x00FF0000;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_b = p1_b >> 16;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_b = tmp1_b + p1_b; // Combine p1_b
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 3. Advance K0_0.
21,000,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[y * rowSize + (3 * x)] = k0_0; // Write K0_0 back to memory
22,500,000    0    0  7,500,000  94,465  92,957 1,500,000    0    0              k0_0 = pixels[y * rowSize + (3 * x) + 3]; // Read into K0_0
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 3. Advance K1_0.
22,500,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 2) * rowSize + (3 * x)] = k1_0; // Write K1_0 back to memory
24,000,000    1    1  7,500,000  94,500  93,000 1,500,000    0    0              k1_0 = pixels[(y + 2) * rowSize + (3 * x) + 3]; // Read into K1_0
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 3. Write p0_b to K0_3[B1].
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_b = tmp0_b >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_b = tmp0_b << 24;
 1,500,000    0    0  1,500,000       0       0         0    0    0              k0_3 = k0_3 & 0x00FFFFFF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_3 = k0_3 | tmp0_b;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 3. Write p1_b to K1_3[B1].
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_b = tmp1_b >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_b = tmp1_b << 24;
 1,500,000    0    0  1,500,000       0       0         0    0    0              k1_3 = k1_3 & 0x00FFFFFF;
 3,000,000    1    1  3,000,000       0       0         0    0    0              k1_3 = k1_3 | tmp1_b;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 4. Read K0_1[G1] into p0_gr
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_gr = p0_gr; // Copy p0_gr into tmp0_gr to perform sum
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_gr = k0_1;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gr = p0_gr & 0xFF000000;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gr = p0_gr >> 24;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_gr = tmp0_gr + p0_gr; // Combine p0_gr
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 4. Read K1_1[G1] into p1_gr
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_gr = p1_gr; // Copy p1_gr into tmp1_gr to perform sum
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_gr = k1_1;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gr = p1_gr & 0xFF000000;
 1,500,000    1    1  1,500,000       0       0         0    0    0              p1_gr = p1_gr >> 24;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_gr = tmp1_gr + p1_gr; // Combine p1_gr
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 4. Write p0_gb to K0_3[G0]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gb = tmp0_gb >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gb = tmp0_gb << 8;
         .    .    .          .       .       .         .    .    .              //k0_3 = k0_3 & 0xFFFF00FF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_3 = k0_3 | tmp0_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 4. Write p1_gb to K1_3[G0]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_gb = tmp1_gb >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_gb = tmp1_gb << 8;
         .    .    .          .       .       .         .    .    .              //k1_3 = k1_3 & 0xFFFF00FF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_3 = k1_3 | tmp1_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 5. Write p0_gr to K0_1[G0]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gr = tmp0_gr >> 1; // Divide by 2
         .    .    .          .       .       .         .    .    .              //k0_1 = k0_1 & 0xFFFFFF00; // TODO not needed?
 3,000,000    1    1  3,000,000       0       0         0    0    0              k0_1 = k0_1 | tmp0_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 5. Write p1_gr to K1_1[G0]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_gr = tmp1_gr >> 1; // Divide by 2
         .    .    .          .       .       .         .    .    .              //k1_1 = k1_1 & 0xFFFFFF00; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_1 = k1_1 | tmp1_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 5. Advance K0_3.
22,500,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 1) * rowSize + (3 * x)] = k0_3; // Write K0_3 back to memory
24,000,000    0    0  7,500,000  93,000  93,000 1,500,000    0    0              k0_3 = pixels[(y + 1) * rowSize + (3 * x) + 3]; // Read into K0_3
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 5. Advance K1_3.
22,500,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 3) * rowSize + (3 * x)] = k1_3; // Write K1_3 back to memory
24,000,000    1    1  7,500,000  93,000  93,000 1,500,000    0    0              k1_3 = pixels[(y + 3) * rowSize + (3 * x) + 3]; // Read into K1_3
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 6. Advance K0_1
22,500,000    0    0  7,500,000       0       0 1,500,000    0    0              pixels[y * rowSize + (3 * x) + 1] = k0_1; // Write k0_1 to memory
22,500,000    1    1  7,500,000  92,963  92,958 1,500,000    0    0              k0_1 = pixels[y * rowSize + (3 * x) + 3 + 1]; // Read into k0_1
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 6. Advance K1_1
24,000,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 2) * rowSize + (3 * x) + 1] = k1_1; // Write k1_1 to memory
24,000,000    1    1  7,500,000  93,000  93,000 1,500,000    0    0              k1_1 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 1]; // Read into k1_1
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 6. Read K0_4[G0] into p0_gb
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_gb = p0_gb;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_gb = k0_4;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gb = p0_gb & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_gb = tmp0_gb + p0_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 6. Read K1_4[G0] into p1_gb
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_gb = p1_gb;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_gb = k1_4;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gb = p1_gb & 0x000000FF;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 7. Read K0_0[G0] into p0_gr
 3,000,000    1    1  1,500,000       0       0 1,500,000    0    0              tmp0_gr = p0_gr;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_gr = k0_0;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gr = p0_gr >> 8;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gr = p0_gr & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_gr = tmp0_gr + p0_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 7. Read K1_0[G0] into p1_gr
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_gr = p1_gr;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_gr = k1_0;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gr = p1_gr >> 8;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gr = p1_gr & 0x000000FF;
 3,000,000    1    1  3,000,000       0       0         0    0    0              tmp1_gr = tmp1_gr + p1_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 7. Read K0_5[G1] into p0_gb
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_gb = p0_gb;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_gb = k0_5;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gb = p0_gb & 0x00FF0000;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gb = p0_gb >> 16;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_gb = tmp0_gb + p0_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 7. Read K1_5[G1] into p1_gb
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_gb = p1_gb;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_gb = k1_5;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gb = p1_gb & 0x00FF0000;
 1,500,000    1    1  1,500,000       0       0         0    0    0              p1_gb = p1_gb >> 16;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_gb = tmp1_gb + p1_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 8. Read K0_2[R1] into p0_r
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_r = p0_r;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_r = k0_2;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_r = p0_r & 0xFF000000;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_r = p0_r >> 24;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_r = tmp0_r + p0_r; // Combine p0_r
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 8. Read K1_2[R1] into p1_r
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp1_r = p1_r;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_r = k1_2;
 1,500,000    1    1  1,500,000       0       0         0    0    0              p1_r = p1_r & 0xFF000000;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_r = p1_r >> 24;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_r = tmp1_r + p1_r; // Combine p1_r
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 8. Write p0_gb to K0_4[G1]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gb = tmp0_gb >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gb = tmp0_gb << 24;
         .    .    .          .       .       .         .    .    .              //k0_4 = k0_4 & 0x00FFFFFF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_4 = k0_4 | tmp0_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 8. Write p1_gb to K1_4[G1]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_gb = tmp1_gb >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_gb = tmp1_gb << 24;
         .    .    .          .       .       .         .    .    .              //k1_4 = k1_4 & 0x00FFFFFF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_4 = k1_4 | tmp1_gb;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 9. Write p0_r to K0_2[R0]
 1,500,000    1    1  1,500,000       0       0         0    0    0              tmp0_r = tmp0_r >> 1; // Divide by 2
         .    .    .          .       .       .         .    .    .              //k0_2 = k0_2 & 0xFFFFFF00; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_2 = k0_2 | tmp0_r;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 9. Write p1_r to K1_2[R0]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_r = tmp1_r >> 1; // Divide by 2
         .    .    .          .       .       .         .    .    .              //k1_2 = k1_2 & 0xFFFFFF00; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_2 = k1_2 | tmp1_r;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 9. Advance K0_4
24,000,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 1) * rowSize + (3 * x) + 1] = k0_4; // Write k0_4 to memory
24,000,000    0    0  7,500,000  94,500  94,500 1,500,000    0    0              k0_4 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 1]; // Read into k0_4
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 9. Advance K1_4
24,000,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 3) * rowSize + (3 * x) + 1] = k1_4; // Write k1_4 to memory
24,000,000    1    1  7,500,000  94,500  94,500 1,500,000    0    0              k1_4 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 1]; // Read into k1_4
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 10. Read K0_0[G0] into p0_gr
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_gr = p0_gr;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_gr = k0_0;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gr = p0_gr >> 8;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_gr = p0_gr & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_gr = tmp0_gr + p0_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 10. Read K1_0[G0] into p1_gr
 3,000,000    1    1  1,500,000       0       0 1,500,000    0    0              tmp1_gr = p1_gr;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_gr = k1_0;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gr = p1_gr >> 8;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_gr = p1_gr & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_gr = tmp1_gr + p1_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 10. Read K0_3[B0] into p0_b
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              tmp0_b = p0_b;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p0_b = k0_3;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p0_b = p0_b & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp0_b = tmp0_b + p0_b;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 10. Read K1_3[B0] into p1_b
 3,000,000    1    1  1,500,000       0       0 1,500,000    0    0              tmp1_b = p1_b;
 3,000,000    0    0  1,500,000       0       0 1,500,000    0    0              p1_b = k1_3;
 1,500,000    0    0  1,500,000       0       0         0    0    0              p1_b = p1_b & 0x000000FF;
 3,000,000    0    0  3,000,000       0       0         0    0    0              tmp1_b = tmp1_b + p1_b;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 11. Write p0_gr to K0_2[G1]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gr = tmp0_gr >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_gr = tmp0_gr << 16;
         .    .    .          .       .       .         .    .    .              //k0_2 = k0_2 & 0xFF00FFFF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_2 = k0_2 | tmp0_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 11. Write p1_gr to K1_2[G1]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_gr = tmp1_gr >> 1; // Divide by 2
 1,500,000    1    1  1,500,000       0       0         0    0    0              tmp1_gr = tmp1_gr << 16;
         .    .    .          .       .       .         .    .    .              //k1_2 = k1_2 & 0xFF00FFFF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_2 = k1_2 | tmp1_gr;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 11. Write p0_b to K0_5[B1]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_b = tmp0_b >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp0_b = tmp0_b << 8;
         .    .    .          .       .       .         .    .    .              //k0_5 = k0_5 & 0xFFFF00FF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k0_5 = k0_5 | tmp0_b;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 11. Write p1_b to K1_5[B1]
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_b = tmp1_b >> 1; // Divide by 2
 1,500,000    0    0  1,500,000       0       0         0    0    0              tmp1_b = tmp1_b << 8;
         .    .    .          .       .       .         .    .    .              //k1_5 = k1_5 & 0xFFFF00FF; // TODO not needed?
 3,000,000    0    0  3,000,000       0       0         0    0    0              k1_5 = k1_5 | tmp1_b;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K0_2
22,500,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[y * rowSize + (3 * x) + 2] = k0_2; // Write k0_2
22,500,000    1    1  7,500,000  92,963  92,958 1,500,000    0    0              k0_2 = pixels[y * rowSize + (3 * x) + 3 + 2]; // Read into k0_2
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K1_2
24,000,000    0    0  7,500,000       0       0 1,500,000    0    0              pixels[(y + 2) * rowSize + (3 * x) + 2] = k1_2; // Write k1_2
24,000,000    1    1  7,500,000  93,000  93,000 1,500,000    0    0              k1_2 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 2]; // Read into k1_2
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K0_5
24,000,000    1    1  7,500,000       0       0 1,500,000    0    0              pixels[(y + 1) * rowSize + (3 * x) + 2] = k0_5; // Write k0_5
24,000,000    1    1  7,500,000  94,500  93,000 1,500,000    0    0              k0_5 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 2]; // Read into k0_5
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K1_5
24,000,000    0    0  7,500,000       0       0 1,500,000    0    0              pixels[(y + 3) * rowSize + (3 * x) + 2] = k1_5; // Write k1_5
24,000,000    0    0  7,500,000  94,500  94,500 1,500,000    0    0              k1_5 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 2]; // Read into k1_5
         .    .    .          .       .       .         .    .    .          }
         .    .    .          .       .       .         .    .    .      }
         .    .    .          .       .       .         .    .    .
    15,001    1    1      8,999       0       0         1    0    0      for (y = 0; y < imageHeight - 2; y += 2) {
         .    .    .          .       .       .         .    .    .          // Loop prologue
    23,992    1    1     11,996       1       1     2,999    0    0          k0_0 = pixels[y * rowSize];
    26,991    0    0     11,996       0       0     2,999    0    0          k0_1 = pixels[y * rowSize + 1];
    26,991    1    1     11,996       0       0     2,999    0    0          k0_2 = pixels[y * rowSize + 2];
    26,991    0    0     11,996       1       1     2,999    0    0          k0_3 = pixels[(y + 1) * rowSize];
    29,990    1    1     11,996       0       0     2,999    0    0          k0_4 = pixels[(y + 1) * rowSize + 1];
    29,990    0    0     11,996       0       0     2,999    0    0          k0_5 = pixels[(y + 1) * rowSize + 2];
    26,991    1    1     11,996       1       1     2,999    0    0          k1_0 = pixels[(y + 2) * rowSize];
    29,990    0    0     11,996       0       0     2,999    0    0          k1_1 = pixels[(y + 2) * rowSize + 1];
    29,990    1    1     11,996       0       0     2,999    0    0          k1_2 = pixels[(y + 2) * rowSize + 2];
    26,991    0    0     11,996   2,999   2,999     2,999    0    0          k1_3 = pixels[(y + 3) * rowSize];
    29,990    1    1     11,996       0       0     2,999    0    0          k1_4 = pixels[(y + 3) * rowSize + 1];
    29,990    0    0     11,996       0       0     2,999    0    0          k1_5 = pixels[(y + 3) * rowSize + 2];
         .    .    .          .       .       .         .    .    .
24,018,991    1    1  9,002,998       0       0     2,999    0    0          for (x = 0; x < imageWidth / 4; x ++) {
         .    .    .          .       .       .         .    .    .              // * Write K0_3[B0, B1] + K1_3[B0, B1] to K1_0[R0].
 8,997,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix1 = k0_3  & 0x000000FF;
 8,997,000    0    0  5,998,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 + (k1_3 & 0x000000FF);
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 >> 1;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x000000FF;
20,993,000    0    0  5,998,000       0       0 2,999,000    0    0              tmp_mix2 = (k0_3 >> 1) + (k1_3 >> 1);
 2,999,000    1    1  2,999,000       0       0         0    0    0              tmp_mix2 = tmp_mix2 & 0xFF000000;
 5,998,000    0    0  5,998,000       0       0         0    0    0              k1_0 = k1_0 | tmp_mix1;
 5,998,000    0    0  5,998,000       0       0         0    0    0              k1_0 = k1_0 | tmp_mix2;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // * Write K0_0[R0] + K1_0[R0] mix to K0_3[R0].
 8,997,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix1 = k0_0 & 0x00FF0000;
 8,997,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix2 = k1_0 & 0x00FF0000;
 5,998,000    1    1  5,998,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 >> 1;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x00FF0000;
 5,998,000    0    0  5,998,000       0       0         0    0    0              k0_3 = k0_3 | tmp_mix1;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // * Write K0_1[R0] + K1_1[R0] mix to K0_4[R0].
 8,997,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix1 = k0_1 >> 1;
 8,997,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix2 = k0_1 >> 1; // OPT: tmp_mix2 = tmp_mix1
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 2,999,000    1    1  2,999,000       0       0         0    0    0              tmp_mix2 = tmp_mix2 & 0x0000FF00;
 5,998,000    0    0  5,998,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 5,998,000    0    0  5,998,000       0       0         0    0    0              k0_4 = k0_4 | tmp_mix1;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // * Write K0_4[B1] + K1_4[B1] to K1_1[B1].
11,996,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix1 = (k0_4 & 0x00FF0000) >> 1;
11,996,000    1    1  2,999,000       0       0 2,999,000    0    0              tmp_mix2 = (k1_4 & 0x00FF0000) >> 1;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x00FF0000;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix2 = tmp_mix2 & 0x00FF0000;
 5,998,000    0    0  5,998,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x00FF0000;
 5,998,000    0    0  5,998,000       0       0         0    0    0              k1_1 = k1_1 | tmp_mix1;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // * Write K0_2[R0, R1] + K1_2[R0, R1] mix to K0_5[R0].
17,994,000    1    1  5,998,000       0       0 2,999,000    0    0              tmp_mix1 = (k0_2 & 0x000000FF) + (k1_2 & 0x000000FF);
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 >> 1;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x000000FF;
20,993,000    0    0  5,998,000       0       0 2,999,000    0    0              tmp_mix2 = (k0_2 >> 1) + (k1_2 >> 1);
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix2 = tmp_mix2 & 0xFF000000;
14,995,000    1    1  8,997,000       0       0 2,999,000    0    0              k0_5 = k0_5 | tmp_mix1 | tmp_mix2;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // * Write K0_5[B0] + K1_5[B0] mix to K1_2[B1].
11,996,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix1 = (k0_5 & 0x0000FF00) >> 1;
11,996,000    0    0  2,999,000       0       0 2,999,000    0    0              tmp_mix2 = (k1_5 & 0x0000FF00) >> 1; // OPT: tmp_mix2 = tmp_mix1
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 2,999,000    1    1  2,999,000       0       0         0    0    0              tmp_mix2 = tmp_mix2 & 0x0000FF00;
 5,998,000    0    0  5,998,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 2,999,000    0    0  2,999,000       0       0         0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 5,998,000    0    0  5,998,000       0       0         0    0    0              k1_2 = k1_2 | tmp_mix1;
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 3. Advance K0_0.
41,986,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[y * rowSize + (3 * x)] = k0_0; // Write K0_0 back to memory
44,985,000    0    0 14,995,000 188,937      62 2,999,000    0    0              k0_0 = pixels[y * rowSize + (3 * x) + 3]; // Read into K0_0
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 3. Advance K1_0.
44,985,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 2) * rowSize + (3 * x)] = k1_0; // Write K1_0 back to memory
47,984,000    1    1 14,995,000 188,937 185,938 2,999,000    0    0              k1_0 = pixels[(y + 2) * rowSize + (3 * x) + 3]; // Read into K1_0
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 5. Advance K0_3.
44,985,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 1) * rowSize + (3 * x)] = k0_3; // Write K0_3 back to memory
47,984,000    0    0 14,995,000 185,938      62 2,999,000    0    0              k0_3 = pixels[(y + 1) * rowSize + (3 * x) + 3]; // Read into K0_3
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 5. Advance K1_3.
44,985,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 3) * rowSize + (3 * x)] = k1_3; // Write K1_3 back to memory
47,984,000    1    1 14,995,000 185,938 185,938 2,999,000    0    0              k1_3 = pixels[(y + 3) * rowSize + (3 * x) + 3]; // Read into K1_3
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 6. Advance K0_1
44,985,000    0    0 14,995,000       0       0 2,999,000    0    0              pixels[y * rowSize + (3 * x) + 1] = k0_1; // Write k0_1 to memory
44,985,000    1    1 14,995,000 185,938      62 2,999,000    0    0              k0_1 = pixels[y * rowSize + (3 * x) + 3 + 1]; // Read into k0_1
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 6. Advance K1_1
47,984,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 2) * rowSize + (3 * x) + 1] = k1_1; // Write k1_1 to memory
47,984,000    1    1 14,995,000 185,938 185,938 2,999,000    0    0              k1_1 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 1]; // Read into k1_1
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 9. Advance K0_4
47,984,000    0    0 14,995,000       0       0 2,999,000    0    0              pixels[(y + 1) * rowSize + (3 * x) + 1] = k0_4; // Write k0_4 to memory
47,984,000    1    1 14,995,000 188,937      63 2,999,000    0    0              k0_4 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 1]; // Read into k0_4
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 9. Advance K1_4
47,984,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 3) * rowSize + (3 * x) + 1] = k1_4; // Write k1_4 to memory
47,984,000    1    1 14,995,000 188,937 188,937 2,999,000    0    0              k1_4 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 1]; // Read into k1_4
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K0_2
44,985,000    0    0 14,995,000       0       0 2,999,000    0    0              pixels[y * rowSize + (3 * x) + 2] = k0_2; // Write k0_2
44,985,000    1    1 14,995,000 185,938      62 2,999,000    0    0              k0_2 = pixels[y * rowSize + (3 * x) + 3 + 2]; // Read into k0_2
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K1_2
47,984,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 2) * rowSize + (3 * x) + 2] = k1_2; // Write k1_2
47,984,000    1    1 14,995,000 185,938 185,938 2,999,000    0    0              k1_2 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 2]; // Read into k1_2
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K0_5
47,984,000    0    0 14,995,000       0       0 2,999,000    0    0              pixels[(y + 1) * rowSize + (3 * x) + 2] = k0_5; // Write k0_5
47,984,000    1    1 14,995,000 188,937      62 2,999,000    0    0              k0_5 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 2]; // Read into k0_5
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .              // 12. Advance K1_5
47,984,000    1    1 14,995,000       0       0 2,999,000    0    0              pixels[(y + 3) * rowSize + (3 * x) + 2] = k1_5; // Write k1_5
47,984,000    0    0 14,995,000 188,937 188,937 2,999,000    0    0              k1_5 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 2]; // Read into k1_5
         .    .    .          .       .       .         .    .    .          }
         .    .    .          .       .       .         .    .    .      }
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Create a new output file to write the modified image
         4    1    1          0       0       0         2    1    1      FILE *outFp = fopen("./decoded.bmp", "wb");
         2    0    0          1       0       0         0    0    0      if (!outFp) {
         .    .    .          .       .       .         .    .    .          printf("Error creating output file.\n");
         .    .    .          .       .       .         .    .    .          free(pixels);
         .    .    .          .       .       .         .    .    .          return 1;
         .    .    .          .       .       .         .    .    .      }
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Write the BMP header and information header
         7    1    1          1       0       0         1    0    0      fwrite(&header, sizeof(BMPHeader), 1, outFp);
         7    0    0          1       0       0         1    0    0      fwrite(&infoHeader, sizeof(BMPInfoHeader), 1, outFp);
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Write the modified pixel data
        10    1    1          4       0       0         1    0    0      fwrite(pixels, rowSize * 4 * imageHeight, 1, outFp);
         .    .    .          .       .       .         .    .    .
         .    .    .          .       .       .         .    .    .      // Clean up
         3    0    0          1       0       0         1    0    0      free(pixels);
         3    0    0          1       0       0         1    0    0      fclose(outFp);
         .    .    .          .       .       .         .    .    .
         2    0    0          0       0       0         1    0    0      printf("Goodbye!\n");
         .    .    .          .       .       .         .    .    .
         1    0    0          0       0       0         0    0    0      return 0;
         2    0    0          2       1       1         0    0    0  }

--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr      DLmr      Dw          D1mw DLmw
--------------------------------------------------------------------------------
2,331,130,998   83   83 988,585,479 3,381,645 2,249,875 207,033,512    4    2  events annotated
