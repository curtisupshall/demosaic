==26374== Cachegrind, a cache and branch-prediction profiler
==26374== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==26374== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==26374== Command: ./metric.exe
==26374==
--26374-- warning: L3 cache found, using its data for the LL simulation.
==26374==
==26374== I   refs:      2,942,790,752
==26374== I1  misses:              973
==26374== LLi misses:              969
==26374== I1  miss rate:          0.00%
==26374== LLi miss rate:          0.00%
==26374==
==26374== D   refs:        982,944,234  (911,004,933 rd   + 71,939,301 wr)
==26374== D1  misses:        1,198,566  (  1,191,772 rd   +      6,794 wr)
==26374== LLd misses:        1,127,809  (  1,126,965 rd   +        844 wr)
==26374== D1  miss rate:           0.1% (        0.1%     +        0.0%  )
==26374== LLd miss rate:           0.1% (        0.1%     +        0.0%  )
==26374==
==26374== LL refs:           1,199,539  (  1,192,745 rd   +      6,794 wr)
==26374== LL misses:         1,128,778  (  1,127,934 rd   +        844 wr)
==26374== LL miss rate:            0.0% (        0.0%     +        0.0%  )

--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./metric.exe
Data file:        cachegrind.out.27404
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:
User annotated:
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir         I1mr  ILmr  Dr         D1mr   DLmr   Dw        D1mw DLmw
--------------------------------------------------------------------------------
31,998,002 1,055 1,047 13,546,645 33,386 17,304 2,846,504  889  676  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir         I1mr ILmr Dr         D1mr   DLmr   Dw        D1mw DLmw  file:function
--------------------------------------------------------------------------------
31,829,694   83   83 13,501,579 30,596 15,231 2,829,036    4    1  /tmp/demosaic440/decode.c:main
    56,525   10   10     13,788  1,030    863        16    3    0  ???:_dl_addr

--------------------------------------------------------------------------------
-- Auto-annotated source: /tmp/demosaic440/decode.c
--------------------------------------------------------------------------------
Ir      I1mr ILmr Dr      D1mr  DLmr  Dw     D1mw DLmw

-- line 21 ----------------------------------------
      .    .    .       .     .     .      .    .    .      uint32_t imageSize;
      .    .    .       .     .     .      .    .    .      int32_t xResolution;
      .    .    .       .     .     .      .    .    .      int32_t yResolution;
      .    .    .       .     .     .      .    .    .      uint32_t colorsUsed;
      .    .    .       .     .     .      .    .    .      uint32_t colorsImportant;
      .    .    .       .     .     .      .    .    .  } BMPInfoHeader;
      .    .    .       .     .     .      .    .    .  #pragma pack(pop)
      .    .    .       .     .     .      .    .    .
      3    0    0       0     0     0      1    0    0  int main() {
      4    0    0       0     0     0      2    2    1      FILE *fp = fopen("./encoded.bmp", "rb");
      2    1    1       1     0     0      0    0    0      if (!fp) {
      .    .    .       .     .     .      .    .    .          printf("Error opening file.\n");
      .    .    .       .     .     .      .    .    .          return 1;
      .    .    .       .     .     .      .    .    .      }
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      BMPHeader header;
      .    .    .       .     .     .      .    .    .      BMPInfoHeader infoHeader;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Read the BMP header
      7    0    0       1     0     0      1    0    0      fread(&header, sizeof(BMPHeader), 1, fp);
      7    1    1       1     0     0      1    0    0      fread(&infoHeader, sizeof(BMPInfoHeader), 1, fp);
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Check if it's a valid BMP file
      3    0    0       1     0     0      0    0    0      if (header.type != 0x4D42) {
      .    .    .       .     .     .      .    .    .          printf("Invalid BMP file.\n");
      .    .    .       .     .     .      .    .    .          fclose(fp);
      .    .    .       .     .     .      .    .    .          return 1;
      .    .    .       .     .     .      .    .    .      }
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Check if it's a 24-bit BMP file
      3    1    1       1     0     0      0    0    0      if (infoHeader.bitDepth != 24) {
      .    .    .       .     .     .      .    .    .          printf("Unsupported bit depth. Only 24-bit BMP is supported.\n");
      .    .    .       .     .     .      .    .    .          fclose(fp);
      .    .    .       .     .     .      .    .    .          return 1;
      .    .    .       .     .     .      .    .    .      }
      .    .    .       .     .     .      .    .    .
      2    0    0       1     0     0      1    0    0      int imageHeight = infoHeader.height;
      2    1    1       1     0     0      1    0    0      int imageWidth = infoHeader.width;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Calculate the row size in words (including padding)
      7    0    0       1     0     0      1    0    0      uint32_t rowSize = ((imageWidth * 3 + 3) & ~3) / 4;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Calculate the column size in words (including padding)
      7    0    0       1     0     0      1    0    0      uint32_t colSize = ((imageHeight * 3 + 3) & ~3) / 4;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Allocate memory for the pixel data
      7    0    0       2     0     0      2    0    0      uint32_t *pixels = (uint32_t*)malloc(rowSize * 4 * imageHeight);
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Allocate memory buffer for image columns
      6    1    1       1     0     0      2    0    0      uint32_t *colBuffer = (uint32_t*)malloc(colSize * 4);
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Read the pixel data
     10    0    0       4     0     0      1    0    0      fread(pixels, rowSize * 4 * imageHeight, 1, fp);
      .    .    .       .     .     .      .    .    .
      3    1    1       1     0     0      1    0    0      fclose(fp);
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      uint32_t x;
      .    .    .       .     .     .      .    .    .      uint32_t y;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // GR bottom
      .    .    .       .     .     .      .    .    .      uint32_t k0_0;
      .    .    .       .     .     .      .    .    .      uint32_t k0_1;
      .    .    .       .     .     .      .    .    .      uint32_t k0_2;
-- line 83 ----------------------------------------
-- line 121 ----------------------------------------
      .    .    .       .     .     .      .    .    .       *
      .    .    .       .     .     .      .    .    .       *      K0, K3, K6, K9            K1, 4, 7, 10             K2, 5, 8, 11
      .    .    .       .     .     .      .    .    .       *  +----+----+----+----+    +----+----+----+----+    +----+----+----+----+
      .    .    .       .     .     .      .    .    .       *  | B1 | R0 | G0 | B0 |    | G1 | B1 | R0 | G0 |    | R1 | G1 | B1 | R0 |
      .    .    .       .     .     .      .    .    .       *  +----+----+----+----+    +----+----+----+----+    +----+----+----+----+
      .    .    .       .     .     .      .    .    .       *
      .    .    .       .     .     .      .    .    .       *
      .    .    .       .     .     .      .    .    .       */
    645    1    1     482     0     0      1    1    0      for (y = 0; y < imageHeight; y += 4) {
      .    .    .       .     .     .      .    .    .          // Loop prologue
  1,280    0    0     640     1     0    160    0    0          k0_0 = pixels[y * rowSize];
  1,440    1    1     640     0     0    160    0    0          k0_1 = pixels[y * rowSize + 1];
  1,440    0    0     640     0     0    160    0    0          k0_2 = pixels[y * rowSize + 2];
  1,440    1    1     640   158   158    160    0    0          k0_3 = pixels[(y + 1) * rowSize];
  1,600    0    0     640     0     0    160    0    0          k0_4 = pixels[(y + 1) * rowSize + 1];
  1,600    1    1     640     0     0    160    0    0          k0_5 = pixels[(y + 1) * rowSize + 2];
  1,440    0    0     640   159   159    160    0    0          k1_0 = pixels[(y + 2) * rowSize];
  1,600    1    1     640     0     0    160    0    0          k1_1 = pixels[(y + 2) * rowSize + 1];
  1,600    0    0     640     0     0    160    0    0          k1_2 = pixels[(y + 2) * rowSize + 2];
  1,440    1    1     640   159   159    160    0    0          k1_3 = pixels[(y + 3) * rowSize];
  1,600    0    0     640     0     0    160    0    0          k1_4 = pixels[(y + 3) * rowSize + 1];
  1,600    1    1     640     0     0    160    0    0          k1_5 = pixels[(y + 3) * rowSize + 2];
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Read K0_1[R0] into p0_r
    320    0    0     160     0     0    160    0    0          p0_r = k0_1;
    160    0    0     160     0     0      0    0    0          p0_r = p0_r & 0x0000FF00;
    160    0    0     160     0     0      0    0    0          p0_r = p0_r >> 8;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Read K0_0[G0] into p0_gr
    320    0    0     160     0     0    160    0    0          p0_gr = k0_0;
    160    0    0     160     0     0      0    0    0          p0_gr = p0_gr >> 8;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Preload p0_gb with K0_4[G0]
    320    0    0     160     0     0    160    0    0          p0_gb = k0_4;
    160    1    1     160     0     0      0    0    0          p0_gb = p0_gb & 0x000000FF;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Load K0_3[B0] into p0_b
    320    0    0     160     0     0    160    0    0          p0_b = k0_3;
    160    0    0     160     0     0      0    0    0          p0_b = p0_b & 0x000000FF;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Read K1_1[R0] into p1_r
    320    0    0     160     0     0    160    0    0          p1_r = k1_1;
    160    0    0     160     0     0      0    0    0          p1_r = p1_r & 0x0000FF00;
    160    0    0     160     0     0      0    0    0          p1_r = p1_r >> 8;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Read K1_0[G0] into p1_gr
    320    0    0     160     0     0    160    0    0          p1_gr = k1_0;
    160    0    0     160     0     0      0    0    0          p1_gr = p1_gr >> 8;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Preload p1_gb with K1_4[G0]
    320    0    0     160     0     0    160    0    0          p1_gb = k1_4;
    160    0    0     160     0     0      0    0    0          p1_gb = p1_gb & 0x000000FF;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .          // 0. Load K1_3[B0] into p1_b
    320    0    0     160     0     0    160    0    0          p1_b = k1_3;
    160    1    1     160     0     0      0    0    0          p1_b = p1_b & 0x000000FF;
      .    .    .       .     .     .      .    .    .
165,280    1    1  61,760     0     0    160    0    0          for (x = 0; x < imageWidth / 4; x ++) {
      .    .    .       .     .     .      .    .    .              // 1. Read K0_1[R0] into p0_r
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_r = p0_r;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_r = k0_1;
 20,480    0    0  20,480     0     0      0    0    0              p0_r = p0_r & 0x0000FF00;
 20,480    0    0  20,480     0     0      0    0    0              p0_r = p0_r >> 8;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_r = tmp0_r + p0_r; // Combine p0_r
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 1. Read K1_1[R0] into p1_r
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_r = p1_r;
 40,960    1    1  20,480     0     0 20,480    0    0              p1_r = k1_1;
 20,480    0    0  20,480     0     0      0    0    0              p1_r = p1_r & 0x0000FF00;
 20,480    0    0  20,480     0     0      0    0    0              p1_r = p1_r >> 8;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_r = tmp1_r + p1_r; // Combine p1_r
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 1. Read K0_4[G0] into p0_gb
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_gb = p0_gb;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_gb = k0_4;
 20,480    0    0  20,480     0     0      0    0    0              p0_gb = p0_gb & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_gb = tmp0_gb + p0_gb; // Combine p0_gb
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 1. Read K1_4[G0] into p1_gb
 40,960    1    1  20,480     0     0 20,480    0    0              tmp1_gb = p1_gb;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_gb = k1_4;
 20,480    0    0  20,480     0     0      0    0    0              p1_gb = p1_gb & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_gb = tmp1_gb + p1_gb; // Combine p1_gb
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 2. Write p0_r to K0_0[R0].
 20,480    0    0  20,480     0     0      0    0    0              tmp0_r = tmp0_r >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp0_r = tmp0_r << 16;
 20,480    0    0  20,480     0     0      0    0    0              k0_0 = k0_0 & 0xFF00FFFF;
 40,960    0    0  40,960     0     0      0    0    0              k0_0 = k0_0 | tmp0_r;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 2. Write p1_r to K1_0[R0].
 20,480    0    0  20,480     0     0      0    0    0              tmp1_r = tmp1_r >> 1; // Divide by 2
 20,480    1    1  20,480     0     0      0    0    0              tmp1_r = tmp1_r << 16;
 20,480    0    0  20,480     0     0      0    0    0              k1_0 = k1_0 & 0xFF00FFFF;
 40,960    0    0  40,960     0     0      0    0    0              k1_0 = k1_0 | tmp1_r;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 2. Read K0_4[B1] into p0_b
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_b = p0_b;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_b = k0_4;
 20,480    0    0  20,480     0     0      0    0    0              p0_b = p0_b & 0x00FF0000;
 20,480    0    0  20,480     0     0      0    0    0              p0_b = p0_b >> 16;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_b = tmp0_b + p0_b; // Combine p0_b
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 2. Read K1_4[B1] into p1_b
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_b = p1_b;
 40,960    1    1  20,480     0     0 20,480    0    0              p1_b = k1_4;
 20,480    0    0  20,480     0     0      0    0    0              p1_b = p1_b & 0x00FF0000;
 20,480    0    0  20,480     0     0      0    0    0              p1_b = p1_b >> 16;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_b = tmp1_b + p1_b; // Combine p1_b
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 3. Advance K0_0.
286,720    1    1 102,400     0     0 20,480    0    0              pixels[y * rowSize + (3 * x)] = k0_0; // Write K0_0 back to memory
307,200    0    0 102,400 1,264 1,264 20,480    0    0              k0_0 = pixels[y * rowSize + (3 * x) + 3]; // Read into K0_0
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 3. Advance K1_0.
307,200    1    1 102,400     0     0 20,480    0    0              pixels[(y + 2) * rowSize + (3 * x)] = k1_0; // Write K1_0 back to memory
327,680    1    1 102,400 1,272 1,272 20,480    0    0              k1_0 = pixels[(y + 2) * rowSize + (3 * x) + 3]; // Read into K1_0
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 3. Write p0_b to K0_3[B1].
 20,480    0    0  20,480     0     0      0    0    0              tmp0_b = tmp0_b >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp0_b = tmp0_b << 24;
 20,480    0    0  20,480     0     0      0    0    0              k0_3 = k0_3 & 0x00FFFFFF;
 40,960    0    0  40,960     0     0      0    0    0              k0_3 = k0_3 | tmp0_b;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 3. Write p1_b to K1_3[B1].
 20,480    0    0  20,480     0     0      0    0    0              tmp1_b = tmp1_b >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp1_b = tmp1_b << 24;
 20,480    0    0  20,480     0     0      0    0    0              k1_3 = k1_3 & 0x00FFFFFF;
 40,960    1    1  40,960     0     0      0    0    0              k1_3 = k1_3 | tmp1_b;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 4. Read K0_1[G1] into p0_gr
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_gr = p0_gr; // Copy p0_gr into tmp0_gr to perform sum
 40,960    0    0  20,480     0     0 20,480    0    0              p0_gr = k0_1;
 20,480    0    0  20,480     0     0      0    0    0              p0_gr = p0_gr & 0xFF000000;
 20,480    0    0  20,480     0     0      0    0    0              p0_gr = p0_gr >> 24;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_gr = tmp0_gr + p0_gr; // Combine p0_gr
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 4. Read K1_1[G1] into p1_gr
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_gr = p1_gr; // Copy p1_gr into tmp1_gr to perform sum
 40,960    0    0  20,480     0     0 20,480    0    0              p1_gr = k1_1;
 20,480    0    0  20,480     0     0      0    0    0              p1_gr = p1_gr & 0xFF000000;
 20,480    1    1  20,480     0     0      0    0    0              p1_gr = p1_gr >> 24;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_gr = tmp1_gr + p1_gr; // Combine p1_gr
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 4. Write p0_gb to K0_3[G0]
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gb = tmp0_gb >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gb = tmp0_gb << 8;
      .    .    .       .     .     .      .    .    .              //k0_3 = k0_3 & 0xFFFF00FF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k0_3 = k0_3 | tmp0_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 4. Write p1_gb to K1_3[G0]
 20,480    0    0  20,480     0     0      0    0    0              tmp1_gb = tmp1_gb >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp1_gb = tmp1_gb << 8;
      .    .    .       .     .     .      .    .    .              //k1_3 = k1_3 & 0xFFFF00FF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k1_3 = k1_3 | tmp1_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 5. Write p0_gr to K0_1[G0]
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gr = tmp0_gr >> 1; // Divide by 2
      .    .    .       .     .     .      .    .    .              //k0_1 = k0_1 & 0xFFFFFF00; // TODO not needed?
 40,960    1    1  40,960     0     0      0    0    0              k0_1 = k0_1 | tmp0_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 5. Write p1_gr to K1_1[G0]
 20,480    0    0  20,480     0     0      0    0    0              tmp1_gr = tmp1_gr >> 1; // Divide by 2
      .    .    .       .     .     .      .    .    .              //k1_1 = k1_1 & 0xFFFFFF00; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k1_1 = k1_1 | tmp1_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 5. Advance K0_3.
307,200    1    1 102,400     0     0 20,480    0    0              pixels[(y + 1) * rowSize + (3 * x)] = k0_3; // Write K0_3 back to memory
327,680    0    0 102,400 1,269 1,269 20,480    0    0              k0_3 = pixels[(y + 1) * rowSize + (3 * x) + 3]; // Read into K0_3
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 5. Advance K1_3.
307,200    1    1 102,400     0     0 20,480    0    0              pixels[(y + 3) * rowSize + (3 * x)] = k1_3; // Write K1_3 back to memory
327,680    1    1 102,400 1,272 1,272 20,480    0    0              k1_3 = pixels[(y + 3) * rowSize + (3 * x) + 3]; // Read into K1_3
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 6. Advance K0_1
307,200    0    0 102,400     0     0 20,480    0    0              pixels[y * rowSize + (3 * x) + 1] = k0_1; // Write k0_1 to memory
307,200    1    1 102,400 1,264 1,264 20,480    0    0              k0_1 = pixels[y * rowSize + (3 * x) + 3 + 1]; // Read into k0_1
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 6. Advance K1_1
327,680    1    1 102,400     0     0 20,480    0    0              pixels[(y + 2) * rowSize + (3 * x) + 1] = k1_1; // Write k1_1 to memory
327,680    1    1 102,400 1,272 1,272 20,480    0    0              k1_1 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 1]; // Read into k1_1
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 6. Read K0_4[G0] into p0_gb
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_gb = p0_gb;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_gb = k0_4;
 20,480    0    0  20,480     0     0      0    0    0              p0_gb = p0_gb & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_gb = tmp0_gb + p0_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 6. Read K1_4[G0] into p1_gb
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_gb = p1_gb;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_gb = k1_4;
 20,480    0    0  20,480     0     0      0    0    0              p1_gb = p1_gb & 0x000000FF;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 7. Read K0_0[G0] into p0_gr
 40,960    1    1  20,480     0     0 20,480    0    0              tmp0_gr = p0_gr;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_gr = k0_0;
 20,480    0    0  20,480     0     0      0    0    0              p0_gr = p0_gr >> 8;
 20,480    0    0  20,480     0     0      0    0    0              p0_gr = p0_gr & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_gr = tmp0_gr + p0_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 7. Read K1_0[G0] into p1_gr
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_gr = p1_gr;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_gr = k1_0;
 20,480    0    0  20,480     0     0      0    0    0              p1_gr = p1_gr >> 8;
 20,480    0    0  20,480     0     0      0    0    0              p1_gr = p1_gr & 0x000000FF;
 40,960    1    1  40,960     0     0      0    0    0              tmp1_gr = tmp1_gr + p1_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 7. Read K0_5[G1] into p0_gb
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_gb = p0_gb;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_gb = k0_5;
 20,480    0    0  20,480     0     0      0    0    0              p0_gb = p0_gb & 0x00FF0000;
 20,480    0    0  20,480     0     0      0    0    0              p0_gb = p0_gb >> 16;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_gb = tmp0_gb + p0_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 7. Read K1_5[G1] into p1_gb
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_gb = p1_gb;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_gb = k1_5;
 20,480    0    0  20,480     0     0      0    0    0              p1_gb = p1_gb & 0x00FF0000;
 20,480    1    1  20,480     0     0      0    0    0              p1_gb = p1_gb >> 16;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_gb = tmp1_gb + p1_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 8. Read K0_2[R1] into p0_r
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_r = p0_r;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_r = k0_2;
 20,480    0    0  20,480     0     0      0    0    0              p0_r = p0_r & 0xFF000000;
 20,480    0    0  20,480     0     0      0    0    0              p0_r = p0_r >> 24;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_r = tmp0_r + p0_r; // Combine p0_r
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 8. Read K1_2[R1] into p1_r
 40,960    0    0  20,480     0     0 20,480    0    0              tmp1_r = p1_r;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_r = k1_2;
 20,480    1    1  20,480     0     0      0    0    0              p1_r = p1_r & 0xFF000000;
 20,480    0    0  20,480     0     0      0    0    0              p1_r = p1_r >> 24;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_r = tmp1_r + p1_r; // Combine p1_r
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 8. Write p0_gb to K0_4[G1]
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gb = tmp0_gb >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gb = tmp0_gb << 24;
      .    .    .       .     .     .      .    .    .              //k0_4 = k0_4 & 0x00FFFFFF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k0_4 = k0_4 | tmp0_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 8. Write p1_gb to K1_4[G1]
 20,480    0    0  20,480     0     0      0    0    0              tmp1_gb = tmp1_gb >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp1_gb = tmp1_gb << 24;
      .    .    .       .     .     .      .    .    .              //k1_4 = k1_4 & 0x00FFFFFF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k1_4 = k1_4 | tmp1_gb;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 9. Write p0_r to K0_2[R0]
 20,480    1    1  20,480     0     0      0    0    0              tmp0_r = tmp0_r >> 1; // Divide by 2
      .    .    .       .     .     .      .    .    .              //k0_2 = k0_2 & 0xFFFFFF00; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k0_2 = k0_2 | tmp0_r;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 9. Write p1_r to K1_2[R0]
 20,480    0    0  20,480     0     0      0    0    0              tmp1_r = tmp1_r >> 1; // Divide by 2
      .    .    .       .     .     .      .    .    .              //k1_2 = k1_2 & 0xFFFFFF00; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k1_2 = k1_2 | tmp1_r;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 9. Advance K0_4
327,680    1    1 102,400     0     0 20,480    0    0              pixels[(y + 1) * rowSize + (3 * x) + 1] = k0_4; // Write k0_4 to memory
327,680    0    0 102,400 1,270 1,270 20,480    0    0              k0_4 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 1]; // Read into k0_4
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 9. Advance K1_4
327,680    1    1 102,400     0     0 20,480    0    0              pixels[(y + 3) * rowSize + (3 * x) + 1] = k1_4; // Write k1_4 to memory
327,680    1    1 102,400 1,272 1,271 20,480    0    0              k1_4 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 1]; // Read into k1_4
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 10. Read K0_0[G0] into p0_gr
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_gr = p0_gr;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_gr = k0_0;
 20,480    0    0  20,480     0     0      0    0    0              p0_gr = p0_gr >> 8;
 20,480    0    0  20,480     0     0      0    0    0              p0_gr = p0_gr & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_gr = tmp0_gr + p0_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 10. Read K1_0[G0] into p1_gr
 40,960    1    1  20,480     0     0 20,480    0    0              tmp1_gr = p1_gr;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_gr = k1_0;
 20,480    0    0  20,480     0     0      0    0    0              p1_gr = p1_gr >> 8;
 20,480    0    0  20,480     0     0      0    0    0              p1_gr = p1_gr & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_gr = tmp1_gr + p1_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 10. Read K0_3[B0] into p0_b
 40,960    0    0  20,480     0     0 20,480    0    0              tmp0_b = p0_b;
 40,960    0    0  20,480     0     0 20,480    0    0              p0_b = k0_3;
 20,480    0    0  20,480     0     0      0    0    0              p0_b = p0_b & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp0_b = tmp0_b + p0_b;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 10. Read K1_3[B0] into p1_b
 40,960    1    1  20,480     0     0 20,480    0    0              tmp1_b = p1_b;
 40,960    0    0  20,480     0     0 20,480    0    0              p1_b = k1_3;
 20,480    0    0  20,480     0     0      0    0    0              p1_b = p1_b & 0x000000FF;
 40,960    0    0  40,960     0     0      0    0    0              tmp1_b = tmp1_b + p1_b;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 11. Write p0_gr to K0_2[G1]
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gr = tmp0_gr >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp0_gr = tmp0_gr << 16;
      .    .    .       .     .     .      .    .    .              //k0_2 = k0_2 & 0xFF00FFFF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k0_2 = k0_2 | tmp0_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 11. Write p1_gr to K1_2[G1]
 20,480    0    0  20,480     0     0      0    0    0              tmp1_gr = tmp1_gr >> 1; // Divide by 2
 20,480    1    1  20,480     0     0      0    0    0              tmp1_gr = tmp1_gr << 16;
      .    .    .       .     .     .      .    .    .              //k1_2 = k1_2 & 0xFF00FFFF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k1_2 = k1_2 | tmp1_gr;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 11. Write p0_b to K0_5[B1]
 20,480    0    0  20,480     0     0      0    0    0              tmp0_b = tmp0_b >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp0_b = tmp0_b << 8;
      .    .    .       .     .     .      .    .    .              //k0_5 = k0_5 & 0xFFFF00FF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k0_5 = k0_5 | tmp0_b;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 11. Write p1_b to K1_5[B1]
 20,480    0    0  20,480     0     0      0    0    0              tmp1_b = tmp1_b >> 1; // Divide by 2
 20,480    0    0  20,480     0     0      0    0    0              tmp1_b = tmp1_b << 8;
      .    .    .       .     .     .      .    .    .              //k1_5 = k1_5 & 0xFFFF00FF; // TODO not needed?
 40,960    0    0  40,960     0     0      0    0    0              k1_5 = k1_5 | tmp1_b;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K0_2
307,200    1    1 102,400     0     0 20,480    0    0              pixels[y * rowSize + (3 * x) + 2] = k0_2; // Write k0_2
307,200    1    1 102,400 1,106 1,106 20,480    0    0              k0_2 = pixels[y * rowSize + (3 * x) + 3 + 2]; // Read into k0_2
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K1_2
327,680    0    0 102,400     0     0 20,480    0    0              pixels[(y + 2) * rowSize + (3 * x) + 2] = k1_2; // Write k1_2
327,680    1    1 102,400 1,113 1,113 20,480    0    0              k1_2 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 2]; // Read into k1_2
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K0_5
327,680    1    1 102,400     0     0 20,480    0    0              pixels[(y + 1) * rowSize + (3 * x) + 2] = k0_5; // Write k0_5
327,680    1    1 102,400 1,111 1,111 20,480    0    0              k0_5 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 2]; // Read into k0_5
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K1_5
327,680    0    0 102,400     0     0 20,480    0    0              pixels[(y + 3) * rowSize + (3 * x) + 2] = k1_5; // Write k1_5
327,680    0    0 102,400 1,272 1,271 20,480    0    0              k1_5 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 2]; // Read into k1_5
      .    .    .       .     .     .      .    .    .          }
      .    .    .       .     .     .      .    .    .      }
      .    .    .       .     .     .      .    .    .
  1,601    1    1     959     0     0      1    0    0      for (y = 0; y < imageHeight - 2; y += 2) {
      .    .    .       .     .     .      .    .    .          // Loop prologue
  2,552    1    1   1,276     1     0    319    0    0          k0_0 = pixels[y * rowSize];
  2,871    0    0   1,276     0     0    319    0    0          k0_1 = pixels[y * rowSize + 1];
  2,871    1    1   1,276     0     0    319    0    0          k0_2 = pixels[y * rowSize + 2];
  2,871    0    0   1,276     1     0    319    0    0          k0_3 = pixels[(y + 1) * rowSize];
  3,190    1    1   1,276     0     0    319    0    0          k0_4 = pixels[(y + 1) * rowSize + 1];
  3,190    0    0   1,276     0     0    319    0    0          k0_5 = pixels[(y + 1) * rowSize + 2];
  2,871    1    1   1,276     1     0    319    0    0          k1_0 = pixels[(y + 2) * rowSize];
  3,190    0    0   1,276     0     0    319    0    0          k1_1 = pixels[(y + 2) * rowSize + 1];
  3,190    1    1   1,276     0     0    319    0    0          k1_2 = pixels[(y + 2) * rowSize + 2];
  2,871    0    0   1,276   319     0    319    0    0          k1_3 = pixels[(y + 3) * rowSize];
  3,190    1    1   1,276     0     0    319    0    0          k1_4 = pixels[(y + 3) * rowSize + 1];
  3,190    0    0   1,276     0     0    319    0    0          k1_5 = pixels[(y + 3) * rowSize + 2];
      .    .    .       .     .     .      .    .    .
329,527    1    1 123,134     0     0    319    0    0          for (x = 0; x < imageWidth / 4; x ++) {
      .    .    .       .     .     .      .    .    .              // * Write K0_3[B0, B1] + K1_3[B0, B1] to K1_0[R0].
122,496    0    0  40,832     0     0 40,832    0    0              tmp_mix1 = k0_3  & 0x000000FF;
122,496    0    0  81,664     0     0      0    0    0              tmp_mix1 = tmp_mix1 + (k1_3 & 0x000000FF);
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 >> 1;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x000000FF;
285,824    0    0  81,664     0     0 40,832    0    0              tmp_mix2 = (k0_3 >> 1) + (k1_3 >> 1);
 40,832    1    1  40,832     0     0      0    0    0              tmp_mix2 = tmp_mix2 & 0xFF000000;
 81,664    0    0  81,664     0     0      0    0    0              k1_0 = k1_0 | tmp_mix1;
 81,664    0    0  81,664     0     0      0    0    0              k1_0 = k1_0 | tmp_mix2;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // * Write K0_0[R0] + K1_0[R0] mix to K0_3[R0].
122,496    0    0  40,832     0     0 40,832    0    0              tmp_mix1 = k0_0 & 0x00FF0000;
122,496    0    0  40,832     0     0 40,832    0    0              tmp_mix2 = k1_0 & 0x00FF0000;
 81,664    1    1  81,664     0     0      0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 >> 1;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x00FF0000;
 81,664    0    0  81,664     0     0      0    0    0              k0_3 = k0_3 | tmp_mix1;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // * Write K0_1[R0] + K1_1[R0] mix to K0_4[R0].
122,496    0    0  40,832     0     0 40,832    0    0              tmp_mix1 = k0_1 >> 1;
122,496    0    0  40,832     0     0 40,832    0    0              tmp_mix2 = k0_1 >> 1; // OPT: tmp_mix2 = tmp_mix1
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 40,832    1    1  40,832     0     0      0    0    0              tmp_mix2 = tmp_mix2 & 0x0000FF00;
 81,664    0    0  81,664     0     0      0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 81,664    0    0  81,664     0     0      0    0    0              k0_4 = k0_4 | tmp_mix1;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // * Write K0_4[B1] + K1_4[B1] to K1_1[B1].
163,328    0    0  40,832     0     0 40,832    0    0              tmp_mix1 = (k0_4 & 0x00FF0000) >> 1;
163,328    1    1  40,832     0     0 40,832    0    0              tmp_mix2 = (k1_4 & 0x00FF0000) >> 1;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x00FF0000;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix2 = tmp_mix2 & 0x00FF0000;
 81,664    0    0  81,664     0     0      0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x00FF0000;
 81,664    0    0  81,664     0     0      0    0    0              k1_1 = k1_1 | tmp_mix1;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // * Write K0_2[R0, R1] + K1_2[R0, R1] mix to K0_5[R0].
244,992    1    1  81,664     0     0 40,832    0    0              tmp_mix1 = (k0_2 & 0x000000FF) + (k1_2 & 0x000000FF);
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 >> 1;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x000000FF;
285,824    0    0  81,664     0     0 40,832    0    0              tmp_mix2 = (k0_2 >> 1) + (k1_2 >> 1);
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix2 = tmp_mix2 & 0xFF000000;
204,160    1    1 122,496     0     0 40,832    0    0              k0_5 = k0_5 | tmp_mix1 | tmp_mix2;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // * Write K0_5[B0] + K1_5[B0] mix to K1_2[B1].
163,328    0    0  40,832     0     0 40,832    0    0              tmp_mix1 = (k0_5 & 0x0000FF00) >> 1;
163,328    0    0  40,832     0     0 40,832    0    0              tmp_mix2 = (k1_5 & 0x0000FF00) >> 1; // OPT: tmp_mix2 = tmp_mix1
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 40,832    1    1  40,832     0     0      0    0    0              tmp_mix2 = tmp_mix2 & 0x0000FF00;
 81,664    0    0  81,664     0     0      0    0    0              tmp_mix1 = tmp_mix1 + tmp_mix2;
 40,832    0    0  40,832     0     0      0    0    0              tmp_mix1 = tmp_mix1 & 0x0000FF00;
 81,664    0    0  81,664     0     0      0    0    0              k1_2 = k1_2 | tmp_mix1;
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 3. Advance K0_0.
571,648    1    1 204,160     0     0 40,832    0    0              pixels[y * rowSize + (3 * x)] = k0_0; // Write K0_0 back to memory
612,480    0    0 204,160     8     0 40,832    0    0              k0_0 = pixels[y * rowSize + (3 * x) + 3]; // Read into K0_0
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 3. Advance K1_0.
612,480    1    1 204,160     0     0 40,832    0    0              pixels[(y + 2) * rowSize + (3 * x)] = k1_0; // Write K1_0 back to memory
653,312    1    1 204,160 2,552     0 40,832    0    0              k1_0 = pixels[(y + 2) * rowSize + (3 * x) + 3]; // Read into K1_0
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 5. Advance K0_3.
612,480    1    1 204,160     0     0 40,832    0    0              pixels[(y + 1) * rowSize + (3 * x)] = k0_3; // Write K0_3 back to memory
653,312    0    0 204,160     8     0 40,832    0    0              k0_3 = pixels[(y + 1) * rowSize + (3 * x) + 3]; // Read into K0_3
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 5. Advance K1_3.
612,480    1    1 204,160     0     0 40,832    0    0              pixels[(y + 3) * rowSize + (3 * x)] = k1_3; // Write K1_3 back to memory
653,312    1    1 204,160 2,552     0 40,832    0    0              k1_3 = pixels[(y + 3) * rowSize + (3 * x) + 3]; // Read into K1_3
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 6. Advance K0_1
612,480    0    0 204,160     0     0 40,832    0    0              pixels[y * rowSize + (3 * x) + 1] = k0_1; // Write k0_1 to memory
612,480    1    1 204,160     8     0 40,832    0    0              k0_1 = pixels[y * rowSize + (3 * x) + 3 + 1]; // Read into k0_1
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 6. Advance K1_1
653,312    1    1 204,160     0     0 40,832    0    0              pixels[(y + 2) * rowSize + (3 * x) + 1] = k1_1; // Write k1_1 to memory
653,312    1    1 204,160 2,552     0 40,832    0    0              k1_1 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 1]; // Read into k1_1
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 9. Advance K0_4
653,312    0    0 204,160     0     0 40,832    0    0              pixels[(y + 1) * rowSize + (3 * x) + 1] = k0_4; // Write k0_4 to memory
653,312    1    1 204,160     8     0 40,832    0    0              k0_4 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 1]; // Read into k0_4
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 9. Advance K1_4
653,312    1    1 204,160     0     0 40,832    0    0              pixels[(y + 3) * rowSize + (3 * x) + 1] = k1_4; // Write k1_4 to memory
653,312    1    1 204,160 2,552     0 40,832    0    0              k1_4 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 1]; // Read into k1_4
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K0_2
612,480    0    0 204,160     0     0 40,832    0    0              pixels[y * rowSize + (3 * x) + 2] = k0_2; // Write k0_2
612,480    1    1 204,160     7     0 40,832    0    0              k0_2 = pixels[y * rowSize + (3 * x) + 3 + 2]; // Read into k0_2
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K1_2
653,312    1    1 204,160     0     0 40,832    0    0              pixels[(y + 2) * rowSize + (3 * x) + 2] = k1_2; // Write k1_2
653,312    1    1 204,160 2,233     0 40,832    0    0              k1_2 = pixels[(y + 2) * rowSize + (3 * x) + 3 + 2]; // Read into k1_2
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K0_5
653,312    0    0 204,160     0     0 40,832    0    0              pixels[(y + 1) * rowSize + (3 * x) + 2] = k0_5; // Write k0_5
653,312    1    1 204,160     7     0 40,832    0    0              k0_5 = pixels[(y + 1) * rowSize + (3 * x) + 3 + 2]; // Read into k0_5
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .              // 12. Advance K1_5
653,312    1    1 204,160     0     0 40,832    0    0              pixels[(y + 3) * rowSize + (3 * x) + 2] = k1_5; // Write k1_5
653,312    0    0 204,160 2,552     0 40,832    0    0              k1_5 = pixels[(y + 3) * rowSize + (3 * x) + 3 + 2]; // Read into k1_5
      .    .    .       .     .     .      .    .    .          }
      .    .    .       .     .     .      .    .    .      }
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Create a new output file to write the modified image
      4    1    1       0     0     0      2    1    0      FILE *outFp = fopen("./decoded.bmp", "wb");
      2    0    0       1     0     0      0    0    0      if (!outFp) {
      .    .    .       .     .     .      .    .    .          printf("Error creating output file.\n");
      .    .    .       .     .     .      .    .    .          free(pixels);
      .    .    .       .     .     .      .    .    .          return 1;
      .    .    .       .     .     .      .    .    .      }
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Write the BMP header and information header
      7    1    1       1     0     0      1    0    0      fwrite(&header, sizeof(BMPHeader), 1, outFp);
      7    0    0       1     0     0      1    0    0      fwrite(&infoHeader, sizeof(BMPInfoHeader), 1, outFp);
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Write the modified pixel data
     10    1    1       4     0     0      1    0    0      fwrite(pixels, rowSize * 4 * imageHeight, 1, outFp);
      .    .    .       .     .     .      .    .    .
      .    .    .       .     .     .      .    .    .      // Clean up
      3    0    0       1     0     0      1    0    0      free(pixels);
      3    0    0       1     0     0      1    0    0      fclose(outFp);
      .    .    .       .     .     .      .    .    .
      2    0    0       0     0     0      1    0    0      printf("Goodbye!\n");
      .    .    .       .     .     .      .    .    .
      1    0    0       0     0     0      0    0    0      return 0;
      2    0    0       2     1     0      0    0    0  }

--------------------------------------------------------------------------------
Ir         I1mr ILmr Dr         D1mr   DLmr   Dw        D1mw DLmw
--------------------------------------------------------------------------------
31,829,694   83   83 13,501,579 30,596 15,231 2,829,036    4    1  events annotated
